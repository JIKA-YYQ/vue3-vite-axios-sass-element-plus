{
	"compilerOptions": {
		"target": "esnext",  //用于指定编译之后的版本目录
		"lib": ["dom", "esnext"],	//用于指定要包含在编译中的库文件
		"module": "esnext",	//用来指定要使用的模板标准
		"sourceMap": true,	//用来指定编译时是否生成.map文件
		"outDir": "./dist",	//用来指定输出文件夹，值为一个文件夹路径字符串，输出的文件都将放置在这个文件夹
		"moduleResolution": "node",	//用于选择模块解析策略，有"node"和"classic"两种类型
		"removeComments": true,	//用于指定是否将编译后的文件注释删掉，设为true的话即删除注释，默认为false
		"noImplicitAny": true,	//如果我们没有一些值设置明确类型，编译器会默认认为这个值为any类型，如果将noImplicitAny设为true,则如果没有设置明确的类型会报错，默认值为false
		"strictNullChecks": false,	//当设为true时，null和undefined值不能赋值给非这两种类型的值，别的类型的值也不能赋给他们，除了any类型，还有个例外就是undefined可以赋值给void类型
		"strictFunctionTypes": true,	//用来指定是否使用函数参数双向协变检查
		"noImplicitThis": true,	//当this表达式的值为any类型的时候，生成一个错误
		"noUnusedLocals": false,	//用于检查是否有定义了但是没有使用变量，对于这一点的检测，使用ESLint可以在你书写代码的时候做提示，你可以配合使用，他的默认值为false
		"noUnusedParameters": true,	//用于检测是否在函数中没有使用的参数
		"noImplicitReturns": true,	//用于检查函数是否有返回值，设为true后，如果函数没有返回值则会提示，默认为false
		"noFallthroughCasesInSwitch": true,	//用于检查switch中是否有case没有使用break跳出switch,默认为false
		"allowSyntheticDefaultImports": true,	//用来指定允许从没有默认导出的模块中默认导入
		"esModuleInterop": true,	//通过导入内容创建命名空间，实现CommonJS和ES模块之间的互操作性
		"emitDecoratorMetadata": true,	//用于指定是否为装上去提供元数据支持，关于元数据，也是ES6的新标准，可以通过Reflect提供的静态方法获取元数据，如果需要使用Reflect的一些方法，需要引用ES2015.Reflect这个库
		"experimentalDecorators": true,	//用于指定是否启用实验性的装饰器特性
		"resolveJsonModule": true,
		"baseUrl": ".",	//用于设置解析非相对模块名称的基本目录，相对模块不会受到baseUrl的影响
		"paths": {
			"@/*": ["src/*"]
		},
		"types": [
			"vite/client",
			"element-plus/global"
		]
	},
	"exclude": ["node_modules"],	//表示要排除的，不编译的文件，它也可以指定一个列表，规则和include一样，可以是文件可以是文件夹，可以是相对路径或绝对路径，可以使用通配符
	"include": ["src"]	//指定要编译的路径列表
}